(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Testizy=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){"use strict";const TestFailedException=require("./test_failed_exception");class Assert{equals(actual,expected,reason){if(!compareObjects(actual,expected)){reason=reason||`${repr(actual)} and ${repr(expected)} are not equal`;throw new TestFailedException(reason)}}notEquals(actual,expected,reason){if(compareObjects(actual,expected)){reason=reason||`${repr(actual)} and ${repr(expected)} are equal`;throw new TestFailedException(reason)}}looseEquals(actual,expected,reason){if(actual!=expected){reason=reason||`${repr(actual)} != ${repr(expected)}`;throw new TestFailedException(reason)}}looseNotEquals(actual,expected,reason){if(actual==expected){reason=reason||`${repr(actual)} == ${repr(expected)}`;throw new TestFailedException(reason)}}fail(reason){reason=reason||`'fail()' was called`;throw new TestFailedException(reason)}true(actual,reason){if(!Boolean(actual)){reason=reason||`Boolean(${repr(actual)}) is not true`;throw new TestFailedException(reason)}}false(actual,reason){if(Boolean(actual)){reason=reason||`Boolean(${repr(actual)}) is not false`;throw new TestFailedException(reason)}}is(actual,expected,reason){if(!Object.is(actual,expected)){reason=reason||`Object.is(${repr(actual)}, ${repr(expected)}) is false`;throw new TestFailedException(reason)}}isNot(actual,expected,reason){if(Object.is(actual,expected)){reason=reason||`Object.is(${repr(actual)}, ${repr(expected)}) is true`;throw new TestFailedException(reason)}}except(method,errorType,reason){if(typeof method!=="function"){throw new Error("'method' must be a function!")}let gotException;try{method();gotException=false}catch(e){gotException=true;if(errorType&&e.constructor!==errorType){reason=reason||`Expected ${errorType.name||repr(errorType)}, but got error of type ${e.constructor.name||repr(expected)}) instead`;throw new TestFailedException(reason)}}if(!gotException){reason=reason||`Expected an exception but didn't get any`;throw new TestFailedException(reason)}}empty(actual,reason){if(!actual){reason=reason||`Object is null or undefined.`;throw new TestFailedException(reason)}if(actual.size===undefined&&actual.length===undefined&&!(actual instanceof Object)){reason=reason||`Object type is not suitable for 'empty' check.`;throw new TestFailedException(reason)}if(!isEmpty(actual)){reason=reason||`Object is not empty.`;throw new TestFailedException(reason)}}notEmpty(actual,reason){if(!actual){reason=reason||`Object is null or undefined.`;throw new TestFailedException(reason)}if(actual.size===undefined&&actual.length===undefined&&!(actual instanceof Object)){reason=reason||`Object type is not suitable for 'notEmpty' check.`;throw new TestFailedException(reason)}if(isEmpty(actual)){reason=reason||`Object is empty.`;throw new TestFailedException(reason)}}instanceOf(actual,type,reason){if(type===Number){if(typeof actual!=="number"){reason=reason||`${repr(actual)} is not instanceof ${type.name||repr(type)}`;throw new TestFailedException(reason)}return}if(type===Boolean){if(typeof actual!=="boolean"){reason=reason||`${repr(actual)} is not instanceof ${type.name||repr(type)}`;throw new TestFailedException(reason)}return}if(type===String){if(typeof actual!=="string"){reason=reason||`${repr(actual)} is not instanceof ${type.name||repr(type)}`;throw new TestFailedException(reason)}return}if(type===Function){if(typeof actual!=="function"){reason=reason||`${repr(actual)} is not instanceof ${type.name||repr(type)}`;throw new TestFailedException(reason)}return}if(type===undefined){if(typeof actual!=="undefined"){reason=reason||`${repr(actual)} is not instanceof ${type.name||repr(type)}`;throw new TestFailedException(reason)}return}if(!(actual instanceof type)){reason=reason||`${repr(actual)} is not instanceof ${type.name||repr(type)}`;throw new TestFailedException(reason)}}wait(timeMs,comment){return new Promise((resolve,reject)=>{setTimeout(resolve,timeMs)})}}function repr(val){if(typeof val==="number"){return val}try{return JSON.stringify(val)}catch(e){return val}}function isEmpty(actual){if(actual.length===0||actual.size===0){return true}else if(typeof actual.length==="number"||typeof actual.size==="number"){return false}return Object.keys(actual).length===0&&Object.entries(actual).length===0}function compareObjects(o1,o2){if(o1&&o1.equals){return o1.equals(o2)}if(o2&&o2.equals){return o2.equals(o1)}if(typeof o1==="string"||typeof o1==="number"||typeof o1==="boolean"||o1===null||o1===undefined||o1 instanceof Function||(typeof o2==="string"||typeof o2==="number"||typeof o2==="boolean"||o2===null||o2===undefined||o2 instanceof Function)){return o1===o2}if(o1&&o2&&o1.constructor!==o2.constructor){return false}if(o1 instanceof Date){if(!(o2 instanceof Date)){return false}return o1.getTime()===o2.getTime()}if(o2 instanceof Date){if(!(o1 instanceof Date)){return false}return o2.getTime()===o1.getTime()}if(o1 instanceof Set){o1=Array.from(o1)}if(o2 instanceof Set){o2=Array.from(o2)}if(o1 instanceof Array||o2 instanceof Array){if(!(o1 instanceof Array)||!(o2 instanceof Array)){return false}if(o1.length!==o2.length){return false}for(let i=0;i<o1.length;++i){if(!compareObjects(o1[i],o2[i])){return false}}}let keysO1=Object.keys(o1).sort();let keysO2=Object.keys(o2).sort();if(keysO1.length!==keysO2.length){return false}for(let i=0;i<keysO1.length;++i){if(!compareObjects(keysO1[i],keysO2[i])){return false}}for(let i=0;i<keysO1.length;++i){let valo=o1[keysO1[i]];let valp=o2[keysO1[i]];if(!compareObjects(valo,valp)){return false}}return true}module.exports=Assert},{"./test_failed_exception":3}],2:[function(require,module,exports){"use strict";module.exports=require("./testizy")},{"./testizy":6}],3:[function(require,module,exports){"use strict";function TestFailedException(message){this.message=message;if("captureStackTrace"in Error){Error.captureStackTrace(this,TestFailedException)}else{this.stack=(new Error).stack}if(typeof this.stack==="string"){this.stack=this.stack.split("\n")}}TestFailedException.prototype=Object.create(Error.prototype);TestFailedException.prototype.name="TestFailedException";TestFailedException.prototype.constructor=TestFailedException;module.exports=TestFailedException},{}],4:[function(require,module,exports){"use strict";class TestResult{constructor(suite,logger){this._suite=suite;this._results=new Map;this._caseStartTime={};this._errors=0;this._success=0;this._casesCount=0;this.logger=logger}hasResultFor(name){return Boolean(this._results.get(name))}isError(name){return this.hasResultFor(name)&&this._results.get(name).success===false}isSuccess(name){return this.hasResultFor(name)&&this._results.get(name).success===true}get testName(){return this._suite.name}get testDescription(){return this._suite.description}get results(){return this._results.entries()}get errorsCount(){return this._errors}get successCount(){return this._success}get totalCount(){return this._casesCount}_startCase(caseName){this._casesCount++;this._caseStartTime[caseName]=accurateTimestamp()}_addError(caseName,reason,stackTrace){if(!this._results.get(caseName)){let testTime=Math.round((accurateTimestamp()-this._caseStartTime[caseName])*1e3)/1e3;this._results.set(caseName,{success:false,reason:reason,time:testTime,stackTrace:stackTrace||[]});this.logger.warn(`[Testizy] [${this._suite.name}] Failed: '${reason}'.`);this._errors++}}_addSuccessIfDidntFail(caseName){if(!this._results.get(caseName)){let testTime=Math.round((accurateTimestamp()-this._caseStartTime[caseName])*1e3)/1e3;this._results.set(caseName,{success:true,time:testTime,reason:null});this.logger.debug(`[Testizy] [${this._suite.name}] Success.`);this._success++}}}function accurateTimestamp(){if(typeof performance!=="undefined"){return performance.now()}return(new Date).getTime()}module.exports=TestResult},{}],5:[function(require,module,exports){"use strict";const TestFailedException=require("./test_failed_exception");const TestResult=require("./test_result");const Assert=require("./assert");class TestSuite{constructor(name,params,logger){this._name=name;this._params=params||{};this.logger=logger;this._cases=new Map}get name(){return this._name}get description(){return this._params.description||""}case(name,method,params){this.logger.info(`[Testizy] [${this._name}] Define test case: '${name}'.`);if(this._cases.get(name)){throw new Error(`A test case named '${name}' already exists!`)}params=params||{};params.timeout=params.timeout||1e4;this._cases.set(name,{method:method,params:params})}setup(method,timeout){this._setup={method:method,params:{timeout:timeout||1e4}}}teardown(method,timeout){this._teardown={method:method,params:{timeout:timeout||1e4}}}wait(time,reason){this.case("[wait] "+reason,assert=>{return new Promise((resolve,reject)=>{setTimeout(resolve,time)})},{timeout:time+1e3})}run(){return new Promise(async(resolve,reject)=>{this.logger.info(`[Testizy] [${this._name}] Start running..`);let result=new TestResult(this,this.logger);let execution=async(caseName,testCase,result)=>{return new Promise(async(resolve,reject)=>{try{result._startCase(caseName);let assert=new Assert;let promise=testCase.method(assert);if(promise&&testCase.params.timeout){setTimeout(()=>{if(!result.hasResultFor(caseName)){result._addError(caseName,`Test did not finish in timely manner (timeout: ${testCase.params.timeout} ms)`,null);resolve(false)}},testCase.params.timeout)}if(promise){await promise}result._addSuccessIfDidntFail(caseName)}catch(e){if(e instanceof TestFailedException){result._addError(caseName,e.message,e.stack)}else{this.logger.warn(`[Testizy] [${this._name}] Got exception while running test case: '${caseName}'. Exception: ${e}.`);result._addError(caseName,`Exception while running test: ${e}`)}}resolve(result.isSuccess(caseName))})};if(this._setup){this.logger.debug(`[Testizy] [${this._name}] Run setup code.`);let success=await execution("__setup__",this._setup,result);if(!success){this.logger.warn(`[Testizy] [${this._name}] Will not run tests because had an error during setup code.`);resolve(result);return}}for(const[caseName,testCase]of this._cases.entries()){this.logger.debug(`[Testizy] [${this._name}] Run test case: '${caseName}'.`);await execution(caseName,testCase,result)}if(this._teardown){this.logger.debug(`[Testizy] [${this._name}] Run teardown code.`);let success=await execution("__teardown__",this._teardown,result);if(!success){this.logger.warn(`[Testizy] [${this._name}] Had error in teardown code.`)}}this.logger.info(`[Testizy] [${this._name}] Finished all cases. Errors: ${result.errorsCount}, Success: ${result.successCount}.`);resolve(result)})}}module.exports=TestSuite},{"./assert":1,"./test_failed_exception":3,"./test_result":4}],6:[function(require,module,exports){"use strict";const TestSuite=require("./test_suite");const Assert=require("./assert");const TestFailedException=require("./test_failed_exception");const TestResult=require("./test_result");class Testizy{constructor(logger){this._tests=new Map;if(logger===null){logger=NullLogger}this.logger=logger||console;this.logger.info(`\n        ___________              __  .__               \n        \\__    ___/___   _______/  |_|__|__________.__.\n          |    |_/ __ \\ /  ___/\\   __\\  \\___   <   |  |\n          |    |\\  ___/ \\___ \\  |  | |  |/    / \\___  |\n          |____| \\___  >____  > |__| |__/_____ \\/ ____|\n                     \\/     \\/                \\/\\/     \n        \n                     A simple, modern, pure JavaScript testing framework.\n                     By Ronen Ness, 2022.\n                     `);this.logger.info(`[Testizy] Created new engine.`);this.logger.debug(`[Testizy] Note: set the 'logger' constructor param to null to disable verbose output from Testizy.`)}suite(name,generator,params){this.logger.info(`[Testizy] Define new test suite: '${name}'`);if(this._tests.get(name)){throw new Error(`A test suite named '${name}' already exists!`)}let suite=new TestSuite(name,params||{},this.logger);this._tests.set(name,suite);if(generator){generator(suite)}return suite}run(tests,onTestFinish){return new Promise(async(resolve,reject)=>{if(!tests){tests=this._tests.keys()}else if(typeof tests==="string"){tests=[tests]}tests=new Set(tests);this.logger.info(`[Testizy] Run test suites: '${Array.from(tests).join(",")}'.`);let results=new Map;for(const[testName,testSuite]of this._tests.entries()){if(tests.has(testName)){let result=await testSuite.run();results.set(testName,result);if(onTestFinish){onTestFinish(testName,result)}}}this.logger.info(`[Testizy] Finished running tests.`);resolve(results)})}injectDefaultCss(){document.head.insertAdjacentHTML("beforeend",`\n            <style>\n                .testizy {\n                    font-family: Tahoma;\n                }\n                .testizy-success {\n                    color: green;\n                }\n                .testizy-failed {\n                    color: red;\n                }\n            </style>\n        `)}renderAllTests(results,parentDom){this.logger.info(`[Testizy] Render test results..`);parentDom=parentDom||document.body;parentDom.innerHTML+=`<h1 class='testizy-h1'>Tests Results</h1>`;for(const[suiteName,suiteResults]of results.entries()){this.renderTest(suiteName,suiteResults)}this.logger.info(`[Testizy] Done rendering.`)}renderTest(suiteName,suiteResults,parentDom){parentDom=parentDom||document.body;let successClass=suiteResults.errorsCount?"testizy-failed":"testizy-success";parentDom.innerHTML+=`<h2 class='testizy testizy-h2 ${successClass}'>${suiteName} [${suiteResults.successCount} / ${suiteResults.totalCount}]</h2>`;parentDom.innerHTML+=`<p class='testizy testizy-p testizy-desc ${successClass}'>${suiteResults.testDescription}</p>`;for(const[caseName,caseResult]of suiteResults.results){if(caseResult.success){parentDom.innerHTML+=`<p class='testizy testizy-p testizy-success'>✔️ '${caseName}' [${caseResult.time} ms]</p>`}else{parentDom.innerHTML+=`<p class='testizy testizy-p testizy-failed'>❌ '${caseName}' [${caseResult.time} ms]<br /> • Error message: '${caseResult.reason}'<br /> • Origin: ${caseResult.stackTrace[2]}</p>`}}}logAllTests(results,colors,_console){for(const[suiteName,suiteResults]of results.entries()){this.logTest(suiteName,suiteResults,colors,_console)}}logTest(suiteName,suiteResults,colors,_console){_console=_console||console;if(colors===undefined){colors=true}let successClass=colors?suiteResults.errorsCount?"[31m":"[32m":"";_console.log(successClass+`\n\n${suiteName} [${suiteResults.successCount} / ${suiteResults.totalCount}]`);_console.log("-----------------------------------------------------------------------------------------");_console.log(successClass+`${suiteResults.testDescription}`);for(const[caseName,caseResult]of suiteResults.results){if(caseResult.success){_console.log(successClass+`V '${caseName}' [${caseResult.time} ms]`)}else{_console.log(successClass+`X '${caseName}' [${caseResult.time} ms]\n - Error message: '${caseResult.reason}'\n - Origin: ${caseResult.stackTrace[2]}`)}}if(colors){_console.log("[0m")}}}Testizy.TestSuite=TestSuite;Testizy.TestResult=TestResult;Testizy.Assert=Assert;Testizy.TestFailedException=TestFailedException;Testizy.version="1.0.1";const NullLogger={trace:function(){},debug:function(){},info:function(){},warn:function(){},error:function(){}};if(typeof module!=="undefined"){module.exports=Testizy}},{"./assert":1,"./test_failed_exception":3,"./test_result":4,"./test_suite":5}]},{},[2])(2)});